version: '3.8'

services:
  frontend:
    networks:
      - my-network
    image: sermalenk/skypro-front:lesson-34
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"

  api:
    networks:
      - my-network
    image: elerbek1kamoloff/skypro1:$GITHUB_REF_NAME-$GITHUB_RUN_ID .
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  migrations:
    networks:
      - my-network
    image: elerbek1kamoloff/skypro1:$GITHUB_REF_NAME-$GITHUB_RUN_ID .
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
    command:
      sh -c "python manage.py migrate"

  db:
    networks:
      - my-network
    image: postgres:15.0-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - diploma_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10


volumes:
  todolist:

networks:
  my-network: